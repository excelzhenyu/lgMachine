<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task" 
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd">
	
	<bean id="jobFactoryExt" class="com.k2data.platform.common.quartz.JobFactoryExt">
	    <property name="ignoredUnknownProperties" value="applicationContext"/>
	</bean>
	
    <bean name="quartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
        <!-- <property name="dataSource" ref="dataSource" />
        
        <property name="quartzProperties">
	        <props>
	            <prop key="org.quartz.scheduler.instanceName">LinFengscheduler</prop>
	            <prop key="org.quartz.scheduler.instanceId">AUTO</prop>
	            <prop key="org.quartz.scheduler.skipUpdateCheck">true</prop>
	            线程池配置
	            <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
	            <prop key="org.quartz.threadPool.threadCount">10</prop>
	            <prop key="org.quartz.threadPool.threadPriority">5</prop>
	            JobStore 配置
	            <prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
	
	            持久化配置
	            通知Scheduler实例要它参与到一个集群当中
	            <prop key="org.quartz.jobStore.isClustered">true</prop>
	            定义了Scheduler实例检入到数据库中的频率(单位：毫秒)。
	            	Scheduler检查是否其他的实例到了它们应当检入的时候未检入；
	            	这能指出一个失败的Scheduler实例，且当前 Scheduler会以此来接管任何执行失败并可恢复的Job。
	            	通过检入操作，Scheduler 也会更新自身的状态记录。
	            	clusterChedkinInterval越小，Scheduler节点检查失败的Scheduler实例就越频繁。
	            	默认值是 15000 (即15 秒)。
	            <prop key="org.quartz.jobStore.clusterCheckinInterval">15000</prop>
	            <prop key="org.quartz.jobStore.maxMisfiresToHandleAtATime">1</prop>
	
				当前时间超过已安排时间多久的作业不执行
					  要保证执行次数，值设大一些，避免过多交替执行同一个作业就设置小一些
	            <prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
	
	            <prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>
	            
	            job XML插件 begin
	            <prop key="org.quartz.plugin.jobInitializer.class">org.quartz.plugins.xml.XMLSchedulingDataProcessorPlugin</prop>
	        	<prop key="org.quartz.plugin.jobInitializer.fileNames">classpath:quartz-jobs.xml</prop>
	        	<prop key="org.quartz.plugin.jobInitializer.scanInterval">1200</prop>
	        	<prop key="org.quartz.plugin.jobInitializer.failOnFileNotFound">true</prop>
	        	JTA 事务需要设为 true
	        	<prop key="org.quartz.plugin.jobInitializer.wrapInUserTransaction">false</prop>
	        	job XML插件 end
	        </props>
	    </property>
	    
	    <property name="schedulerName" value="LinFengscheduler" />
        
        QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动
    	<property name="startupDelay" value="10" />
    	
    	<property name="applicationContextSchedulerContextKey" value="applicationContextKey" />
    	
    	QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了
    	<property name="overwriteExistingJobs" value="true" />
    	
    	设置自动启动
    	<property name="autoStartup" value="true" />
    	
    	<property name="jobFactory" ref="jobFactoryExt"/>
    
    	注册jobDetail
        <property name="jobDetails">  
            <list>  
                <ref bean="testjob1"/>
            </list>  
        </property>  
        
        注册触发器
        <property name="triggers">  
            <list>  
               <ref bean="testjob1Trigger"/>
            </list>  
        </property>  
        
        <property name="schedulerListeners">
	        <list>
	            <ref bean="quartzSchedulerListener" />
	        </list>
	    </property> -->
    </bean>
    
</beans>